#! /usr/bin/env perl

use warnings;
use strict;
use LWP::UserAgent;

sub lprint {
    print @_, "\n";
}

our %timers;
open QUEUE, ">>", "queue";
select QUEUE;
$| = 1;
select STDOUT;

=head2 fetch_url

    my $pagedata = ::fetch_url($url);

Fetch the data using a 10 second timeout.  Return undef if an error or timeout
was encountered.

=cut

my $lwp = LWP::UserAgent->new();
$lwp->timeout(10);
$lwp->env_proxy();

sub fetch_url {
    my ($url) = @_;
    my $response = $lwp->get($url);
    if($response->is_success) {
        return $response->content;
    }
    main::lprint("fetch_url: failure fetching $url: " . $response->status_line);
    return undef;
}

sub create_timer {
    my ($name, $obj, $meth, $timeout) = @_;
    lprint("creating timer $name");
    $timers{$name} = sub {
        lprint("Running timer $name");
        eval { $obj->$meth };
        lprint("Failed: $@") if $@;
    };
}

sub delete_timer {
    my ($name) = @_;
    lprint("deleting timer $name");
    delete $timers{$name};
}

sub send_privmsg {
    my ($net, $to, $msg) = @_;
    lprint("sending: $net $to $msg");
    print QUEUE "$net $to $msg\n";
}

my @modules = qw/ karmalog githubparser gitoriousparser googlecodeparser autofeed adhoc tpfwikilog tracwikilog websitelog parrotlog parrotticketlog /;
for my $mod (@modules) {
    $mod = "modules::local::$mod";
    eval "require $mod;"; $mod->init;
    print "$@\n" if $@;
}

sub run_timers {
    for (@modules) {
        if (defined &{ "${_}::fetch_metadata" }) {
            lprint("*** fetching metadata for $_ ***");
            $_->fetch_metadata;
        }
    }
    my @keys = keys %timers;
    for (@keys) { $timers{$_}->() if exists $timers{$_} }
}

while(1) {
    run_timers;
    lprint("sleeping...");
    sleep(300);
}
